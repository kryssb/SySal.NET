using System;

namespace SySal
{
	/// <summary>
	/// Opera persistence class. Supports seamless persistence of large data objects to files / OperaDB.
	/// </summary>
	/// <remarks>
	/// <para>This class is at the foundation of the <b>Grand Unified File System</b> (GUFS). GUFS unifies file access and DB access, so that data in the DB are accessed with a file-like path.</para>
	/// <para>Files retain their path syntax (be it a local or network path); objects stored in the DB are found at subdirectories of <c>db:\</c> that is the metaphoric disk unit on which DB data reside.</para>
	/// <para>The extension of the GUFS file name is important for OperaPersistence, as it defines the data type.</para>
	/// <para>One difference survives between files and DB data: for some data types, the identifier is generated by the DB upon insertion, and is unknown <i>a priori</i>. Therefore, the write path is different from the read path: 
	/// e.g. on writing a LinkedZone to the DB one fills the relevant information fields, but the Id is unknown, and is actually returned as an output by the insertion procedure.</para>
	/// <para>Path syntax for <b>Raw Data Catalogs</b>
	/// <list type="table">
	/// <item><term>Files</term><description>Standard OS paths. Examples: <example><c>c:\mydata\plate_0023.rwc</c>, <c>\\datasrv.mysite.eu\datashare\plate_0023.rwc</c></example></description></item>
	/// <item><term>DB read path</term><description>N/A</description></item>
	/// <item><term>DB write path</term><description>N/A</description></item>
	/// </list>
	/// </para>
	/// <para>Path syntax for <b>Raw Data Fragments</b>
	/// <list type="table">
	/// <item><term>Files</term><description>Standard OS paths. Examples: <example><c>c:\mydata\plate_0023.rwd</c>, <c>c:\mydata\plate_0023.rwd.00000008</c>, <c>\\datasrv.mysite.eu\datashare\plate_0023.rwd</c></example></description></item>
	/// <item><term>DB read path</term><description>N/A</description></item>
	/// <item><term>DB write path</term><description>N/A</description></item>
	/// </list>
	/// </para>
	/// <para>Path syntax for <b>LinkedZones</b>
	/// <list type="table">
	/// <item><term>Files</term><description>Standard OS paths. Examples: <example><c>c:\mydata\plate_0023.tlg</c>, <c>\\datasrv.mysite.eu\datashare\plate_0023.tlg</c></example></description></item>
	/// <item><term>DB read path</term><description>The brick id and zone id are required. Example: <example><c>db:\8\277801335.tlg</c></example></description></item>
	/// <item><term>DB write path</term><description>The brick id, plate id, process operation, series, raw data path, start time and end time are required. Example: <example><c>db:\8\139903233\139903188\834\'\\myserver.mysite.eu\datashare\myzone'\'8/11/2008 11:53:08'\'8/11/2008 12:08:24'.tlg</c></example></description></item>
	/// </list>
	/// </para>	
    /// <para>Path syntax for <b>DBMIPMicroTrackIndex</b>
    /// <list type="table">
    /// <item><term>Files</term><description>Standard OS paths. Examples: <example><c>c:\mydata\plate_0008.tlg</c></example></description></item>
    /// <item><term>DB read path</term><description>N/A</description></item>
    /// <item><term>DB write path</term><description>N/A</description></item>
    /// </list>
    /// </para>
    /// <para>Path syntax for <b>BaseTrackIgnoreAlignment</b>
    /// <list type="table">
    /// <item><term>Files</term><description>Standard OS paths. Examples: <example><c>c:\mydata\plate_0008.tlg</c></example></description></item>
    /// <item><term>DB read path</term><description>N/A</description></item>
    /// <item><term>DB write path</term><description>N/A</description></item>
    /// </list>
    /// </para>
    /// <para>Path syntax for <b>BaseTrackIndex</b>
    /// <list type="table">
    /// <item><term>Files</term><description>Standard OS paths. Examples: <example><c>c:\mydata\plate_0008.tlg</c></example></description></item>
    /// <item><term>DB read path</term><description>N/A</description></item>
    /// <item><term>DB write path</term><description>N/A</description></item>
    /// </list>
    /// </para>
    /// <para>Path syntax for <b>SlopeCorrections</b>
    /// <list type="table">
    /// <item><term>Files</term><description>Standard OS paths. Examples: <example><c>c:\mydata\plate_0008.tlg</c></example></description></item>
    /// <item><term>DB read path</term><description>N/A</description></item>
    /// <item><term>DB write path</term><description>N/A</description></item>
    /// </list>
    /// </para>
    /// <para>Path syntax for <b>TotalScan Reconstructions</b>
	/// <list type="table">
	/// <item><term>Files</term><description>Standard OS paths. Examples: <example><c>c:\mydata\event_512.tsr</c>, <c>\\datasrv.mysite.eu\datashare\event_512.tsr</c></example></description></item>
	/// <item><term>DB read path</term><description>The brick id, reconstruction id and option id are required. Example: <example><c>db:\8\13874388\2.tsr</c></example></description></item>
	/// <item><term>DB write path</term><description>The brick id, process operation id and option id are required. Example: <example><c>db:\8\18004300\5.tsr</c></example></description></item>
	/// </list>
	/// </para>
	/// <para>Path syntax for <b>ProgramSettings</b>
	/// <list type="table">
	/// <item><term>Files</term><description>Standard OS paths. Examples: <example><c>c:\mydata\predscan01.xml</c>, <c>\\datasrv.mysite.eu\datashare\predscan01.xml</c></example></description></item>
	/// <item><term>DB read path</term><description>The program settings id is required. Example: <example><c>db:\832388.xml</c></example></description></item>
	/// <item><term>DB write path</term><description>The executable, description, driverlevel and template marks usage are required. The driver level must appear as a number (0 - Lowest, 1 - Scanning, 2 - Volume, 3 - Brick, 4 - System); for template mark set usage, 0 means 'uses calibrated marks', nonzero means 'uses nominal marks'. Example: <example><c>db:\'PredictionScan3Driver.exe'\'Prediction scanning for OPERA Scanback'\1\0.xml</c></example></description></item>
	/// </list>
	/// <b>NOTICE: program settings written to the DB in this way will be recorded as being produced by the author specified by the current default access credentials obtained from <see cref="SySal.OperaDb.OperaDbCredentials"/>.</b>
	/// </para>
	/// </remarks>
	public sealed class OperaPersistence
	{
		/// <summary>
		/// Program Settings container for an XML document.
		/// </summary>
		public class ProgramSettings : SySal.OperaDb.ComputingInfrastructure.ProgramSettings
		{			
			/// <summary>
			/// Builds a Program Settings container for the XML document specified in the string.
			/// </summary>
			/// <param name="xmlstr"></param>
			public ProgramSettings(string xmlstr)
			{
				m_DB_Id = 0;
				m_DB_Id_Author = 0;
				m_Description = "";
				m_Executable = "";
				m_DriverLevel = SySal.DAQSystem.Drivers.DriverType.Lowest;
				m_UsesTemplateMarks = false;
				m_Settings = xmlstr;
			}

			/// <summary>
			/// Builds a Program Settings.
			/// </summary>
			/// <param name="description">Description of the Program Settings.</param>
			/// <param name="executable">Executable of the Program Settings.</param>
			/// <param name="id_author">Id of the author.</param>
			/// <param name="driverlevel">Driver level of the Program Settings</param>
			/// <param name="templatemks">true if the Program Settings use template marks, false otherwise.</param>
			/// <param name="xmlstr">settings.</param>
			public ProgramSettings(string description, string executable, long id_author, SySal.DAQSystem.Drivers.DriverType driverlevel, bool templatemks, string xmlstr)
			{
				m_DB_Id = 0;
				m_DB_Id_Author = id_author;
				m_Description = description;
				m_Executable = executable;
				m_DriverLevel = driverlevel;
				m_UsesTemplateMarks = templatemks;
				m_Settings = xmlstr;
			}
		}		

		private static SySal.OperaDb.OperaDbConnection m_Conn = null;

		/// <summary>
		/// Sets the connection. This speeds up data storage/retrieval when a connection is already open. If this is null, OperaPersistence will open its own connection.
		/// </summary>
		public static SySal.OperaDb.OperaDbConnection Connection
		{
			set
			{
				if (m_Conn != null) m_Conn.Close();
				m_Conn = value;				
			}
		}

		private static SySal.OperaDb.OperaDbConnection Conn
		{
			get
			{
				if (m_Conn == null) 
				{
					try
					{
						m_Conn = SySal.OperaDb.OperaDbCredentials.CreateFromRecord().Connect();
						m_Conn.Open();
					}
					catch (Exception x)
					{
						if (m_Conn != null)
						{
							m_Conn.Close();
							m_Conn = null;
						}
						throw x;
					}
				}
				return m_Conn;
			}
		}

		private static object Restore_Catalog(string path)
		{
			System.IO.FileStream r = null;
			SySal.Scanning.Plate.IO.OPERA.RawData.Catalog cat = null;
			try
			{
				r = new System.IO.FileStream(path, System.IO.FileMode.Open, System.IO.FileAccess.Read);
				cat = new SySal.Scanning.Plate.IO.OPERA.RawData.Catalog(r);
				r.Close();
			}
			catch (Exception x)
			{
				if (r != null) r.Close();
				throw x;
			}
			return cat;
		}

		private static object Restore_Fragment(string path)
		{
			System.IO.FileStream r = null;
			SySal.Scanning.Plate.IO.OPERA.RawData.Fragment frag = null;
			try
			{
				r = new System.IO.FileStream(path, System.IO.FileMode.Open, System.IO.FileAccess.Read);
				frag = new SySal.Scanning.Plate.IO.OPERA.RawData.Fragment(r);
				r.Close();
			}
			catch (Exception x)
			{
				if (r != null) r.Close();
				throw x;
			}
			return frag;
		}

		private static SySal.OperaDb.Scanning.LinkedZone.DetailLevel m_LZDetailLevel = SySal.OperaDb.Scanning.LinkedZone.DetailLevel.Full;

        /// <summary>
        /// Write-only member that defines the detail level of linked zones read through OperaPersistence.
        /// </summary>
		public static SySal.OperaDb.Scanning.LinkedZone.DetailLevel LinkedZoneDetailLevel
		{
			set
			{
				m_LZDetailLevel = value;	
			}
		}

        private static object Restore_SlopeCorrections(string path)
        {
            if (!path.ToLower().EndsWith(".tlg")) throw new Exception("Extension must be .TLG");
            if (path.ToLower().StartsWith("db:")) throw new Exception("Restoration from DB is not supported for this data type.");
            System.IO.FileStream str = new System.IO.FileStream(path, System.IO.FileMode.Open, System.IO.FileAccess.Read);
            if (str == null) throw new Exception("Can't find the TLG file to read from.");
            object o = new SySal.Scanning.PostProcessing.SlopeCorrections(str);
            str.Close();
            return o;
        }

        private static object Restore_BaseTrackIndex(string path)
        {
            if (!path.ToLower().EndsWith(".tlg")) throw new Exception("Extension must be .TLG");
            if (path.ToLower().StartsWith("db:")) throw new Exception("Restoration from DB is not supported for this data type.");
            System.IO.FileStream str = new System.IO.FileStream(path, System.IO.FileMode.Open, System.IO.FileAccess.Read);
            if (str == null) throw new Exception("Can't find the TLG file to read from.");
            object o = new SySal.Scanning.Plate.IO.OPERA.LinkedZone.BaseTrackIndex(str);
            str.Close();
            return o;
        }

        private static object Restore_BaseTrackIgnoreAligment(string path)
        {
            if (!path.ToLower().EndsWith(".tlg")) throw new Exception("Extension must be .TLG");
            if (path.ToLower().StartsWith("db:")) throw new Exception("Restoration from DB is not supported for this data type.");
            System.IO.FileStream str = new System.IO.FileStream(path, System.IO.FileMode.Open, System.IO.FileAccess.Read);
            if (str == null) throw new Exception("Can't find the TLG file to read from.");
            object o = new SySal.Scanning.Plate.IO.OPERA.LinkedZone.BaseTrackIgnoreAlignment(str);
            str.Close();
            return o;
        }

        private static object Restore_DBMIPMicroTrackIndex(string path)
        {
            if (!path.ToLower().EndsWith(".tlg")) throw new Exception("Extension must be .TLG");
            if (path.ToLower().StartsWith("db:")) throw new Exception("Restoration from DB is not supported for this data type.");
            System.IO.FileStream str = new System.IO.FileStream(path, System.IO.FileMode.Open, System.IO.FileAccess.Read);
            if (str == null) throw new Exception("Can't find the TLG file to read from.");
            object o = new SySal.OperaDb.Scanning.DBMIPMicroTrackIndex(str);
            str.Close();
            return o;
        }

        private static System.Text.RegularExpressions.Regex Restore_LinkedZone_X = new System.Text.RegularExpressions.Regex(@"db:\\(\d+)\\(\d+).tlg");

		private static object Restore_LinkedZone(string path)
		{
			if (!path.ToLower().EndsWith(".tlg")) throw new Exception("Extension must be .TLG");
			System.Text.RegularExpressions.Match m = Restore_LinkedZone_X.Match(path.ToLower());
			if (m.Success && m.Length == path.Length)
			{
				return new SySal.OperaDb.Scanning.LinkedZone(Conn, null, SySal.OperaDb.Convert.ToInt64(m.Groups[1].Value), SySal.OperaDb.Convert.ToInt64(m.Groups[2].Value), m_LZDetailLevel);
			}
			else
			{
				System.IO.FileStream r = null;
				SySal.Scanning.Plate.IO.OPERA.LinkedZone lz = null;
				try
				{
					r = new System.IO.FileStream(path, System.IO.FileMode.Open, System.IO.FileAccess.Read);
					lz = new SySal.Scanning.Plate.IO.OPERA.LinkedZone(r);
					r.Close();
				}
				catch (Exception x)
				{
					if (r != null) r.Close();
					throw x;
				}
				return lz;
			}
		}

		private static object Restore_Volume(string path)
		{            
			if (!path.ToLower().EndsWith(".tsr")) throw new Exception("Extension must be .TSR");
			if (path.ToLower().StartsWith(@"db:\"))
			{
				string [] dbparameters = path.Substring(4, path.Length - 8).Split('\\');
				if (dbparameters.Length != 3) throw new Exception("Unsupported number of DB parameters.");
				return new SySal.OperaDb.TotalScan.Volume(Conn, null, SySal.OperaDb.Convert.ToInt64(dbparameters[0]), SySal.OperaDb.Convert.ToInt64(dbparameters[1]), SySal.OperaDb.Convert.ToInt64(dbparameters[2]));
			}
			else
			{
                SySal.OperaDb.TotalScan.DBMIPMicroTrackIndex.RegisterFactory();
                SySal.OperaDb.TotalScan.DBNamedAttributeIndex.RegisterFactory();
				System.IO.FileStream r = null;
				SySal.TotalScan.Volume vol = null;
				try
				{
					r = new System.IO.FileStream(path, System.IO.FileMode.Open, System.IO.FileAccess.Read);
					vol = new SySal.TotalScan.Volume(r);
					r.Close();
				}
				catch (Exception x)
				{
					if (r != null) r.Close();
					throw x;
				}
				return vol;
			}
		}

		private static System.Text.RegularExpressions.Regex Restore_XmlDoc_X = new System.Text.RegularExpressions.Regex(@"db:\\(\d+).xml");
			
		private static object Restore_XmlDoc(string path)
		{
			if (!path.ToLower().EndsWith(".xml")) throw new Exception("Extension must be .XML");
			if (path.ToLower().StartsWith(@"db:\"))
			{
				return new SySal.OperaDb.ComputingInfrastructure.ProgramSettings(SySal.OperaDb.Convert.ToInt64(path.Substring(4, path.Length - 8)), Conn, null);
			}
			else
			{
				System.IO.StreamReader r = null;
				SySal.OperaDb.ComputingInfrastructure.ProgramSettings prg = null;
				try
				{
					r = new System.IO.StreamReader(path);
					prg = new ProgramSettings(r.ReadToEnd());
					r.Close();
				}
				catch (Exception x)
				{
					if (r != null) r.Close();
					throw x;
				}
				return prg;
			}
		}

		/// <summary>
		/// Retrieves an object from a persistent repository.
		/// </summary>
		/// <param name="persistence_path">path where the object is stored.</param>
		/// <param name="req_type">type of the object to be restored.</param>
		/// <returns>the required object.</returns>
		/// <remarks>
		/// <para>The required type must be one of the following:
		/// <list type="bullet">
		/// <item><term><c>SySal.Scanning.Plate.IO.OPERA.RawData.Catalog</c></term></item>
		/// <item><term><c>SySal.Scanning.Plate.IO.OPERA.RawData.Fragment</c></term></item>
		/// <item><term><c>SySal.Scanning.Plate.IO.OPERA.LinkedZone</c></term></item>
        /// <item><term><c>SySal.Scanning.Plate.IO.OPERA.LinkedZone.BaseTrackIndex</c></term></item>
        /// <item><term><c>SySal.Scanning.Plate.IO.OPERA.LinkedZone.BaseTrackIgnoreAlignment</c></term></item>
        /// <item><term><c>SySal.Scanning.PostProcessing.SlopeCorrections</c></term></item>
        /// <item><term><c>SySal.OperaDb.Scanning.DBMIPMicroTrackIndex</c></term></item>
		/// <item><term><c>SySal.TotalScan.Volume</c></term></item>
		/// <item><term><c>SySal.OperaDb.ComputingInfrastructure.ProgramSettings</c></term></item>
		/// </list>
		/// </para>
		/// </remarks>
		public static object Restore(string persistence_path, System.Type req_type)
		{
			if (req_type == typeof(SySal.Scanning.Plate.IO.OPERA.RawData.Catalog))
				return (SySal.Scanning.Plate.IO.OPERA.RawData.Catalog)Restore_Catalog(persistence_path);
			else if (req_type == typeof(SySal.Scanning.Plate.IO.OPERA.RawData.Fragment))
				return (SySal.Scanning.Plate.IO.OPERA.RawData.Fragment)Restore_Fragment(persistence_path);
			else if (req_type == typeof(SySal.Scanning.Plate.IO.OPERA.LinkedZone))
				return (SySal.Scanning.Plate.IO.OPERA.LinkedZone)Restore_LinkedZone(persistence_path);
            else if (req_type == typeof(SySal.Scanning.Plate.IO.OPERA.LinkedZone.BaseTrackIndex))
                return (SySal.Scanning.Plate.IO.OPERA.LinkedZone.BaseTrackIndex)Restore_BaseTrackIndex(persistence_path);
            else if (req_type == typeof(SySal.Scanning.Plate.IO.OPERA.LinkedZone.BaseTrackIgnoreAlignment))
                return (SySal.Scanning.Plate.IO.OPERA.LinkedZone.BaseTrackIgnoreAlignment)Restore_BaseTrackIgnoreAligment(persistence_path);
            else if (req_type == typeof(SySal.OperaDb.Scanning.DBMIPMicroTrackIndex))
                return (SySal.OperaDb.Scanning.DBMIPMicroTrackIndex)Restore_DBMIPMicroTrackIndex(persistence_path);
            else if (req_type == typeof(SySal.Scanning.PostProcessing.SlopeCorrections))
                return (SySal.Scanning.PostProcessing.SlopeCorrections)Restore_SlopeCorrections(persistence_path);
            else if (req_type == typeof(SySal.TotalScan.Volume))
				return (SySal.TotalScan.Volume)Restore_Volume(persistence_path);
			else if (req_type == typeof(SySal.OperaDb.ComputingInfrastructure.ProgramSettings))
				return (SySal.OperaDb.ComputingInfrastructure.ProgramSettings)Restore_XmlDoc(persistence_path);			
			throw new Exception("Unsupported type '" + req_type.FullName + "'cannot be restored.");
		}

		private static System.Text.RegularExpressions.Regex Persist_LinkedZone_X = new System.Text.RegularExpressions.Regex(@"db:\\(\d+)\\(\d+)\\(\d+)\\(\d+)\\'([^']+)'\\'([^']+)'\\'([^']+)'.tlg");

        /// <summary>
        /// Stores a <see cref="SySal.Scanning.PostProcessing.SlopeCorrections"/> to a TLG file.
        /// </summary>
        /// <param name="persistence_path">the path to be used for persistence.</param>
        /// <param name="sc">the SlopeCorrections to be persisted.</param>
        /// <returns>the persistence path from where the SlopeCorrections can be restored.</returns>
        public static string Persist(string persistence_path, SySal.Scanning.PostProcessing.SlopeCorrections sc)
        {
            if (!persistence_path.ToLower().EndsWith(".tlg")) throw new Exception("Extension must be .TLG");
            if (persistence_path.ToLower().StartsWith("db:")) throw new Exception("DB serialization for this data type is not supported");
            System.IO.FileStream str = new System.IO.FileStream(persistence_path, System.IO.FileMode.Open, System.IO.FileAccess.ReadWrite);
            if (str == null) throw new Exception("TLG file must already exist to append this information");
            sc.Save(str);
            str.Flush();
            str.Close();
            return persistence_path;
        }

        /// <summary>
        /// Stores a <see cref="SySal.Scanning.Plate.IO.OPERA.LinkedZone.BaseTrackIndex"/> to a TLG file.
        /// </summary>
        /// <param name="persistence_path">the path to be used for persistence.</param>
        /// <param name="bi">the BaseTrackIndex to be persisted.</param>
        /// <returns>the persistence path from where the BaseTrackIndex can be restored.</returns>
        public static string Persist(string persistence_path, SySal.Scanning.Plate.IO.OPERA.LinkedZone.BaseTrackIndex bi)
        {
            if (!persistence_path.ToLower().EndsWith(".tlg")) throw new Exception("Extension must be .TLG");
            if (persistence_path.ToLower().StartsWith("db:")) throw new Exception("DB serialization for this data type is not supported");
            System.IO.FileStream str = new System.IO.FileStream(persistence_path, System.IO.FileMode.Open, System.IO.FileAccess.ReadWrite);
            if (str == null) throw new Exception("TLG file must already exist to append this information");
            bi.Save(str);
            str.Flush();
            str.Close();
            return persistence_path;
        }

        /// <summary>
        /// Stores a <see cref="SySal.Scanning.Plate.IO.OPERA.LinkedZone.BaseTrackIgnoreAligment"/> to a TLG file.
        /// </summary>
        /// <param name="persistence_path">the path to be used for persistence.</param>
        /// <param name="ai">the BaseTrackIgnoreAligment to be persisted.</param>
        /// <returns>the persistence path from where the BaseTrackIgnoreAligment can be restored.</returns>
        public static string Persist(string persistence_path, SySal.Scanning.Plate.IO.OPERA.LinkedZone.BaseTrackIgnoreAlignment ai)
        {
            if (!persistence_path.ToLower().EndsWith(".tlg")) throw new Exception("Extension must be .TLG");
            if (persistence_path.ToLower().StartsWith("db:")) throw new Exception("DB serialization for this data type is not supported");
            System.IO.FileStream str = new System.IO.FileStream(persistence_path, System.IO.FileMode.Open, System.IO.FileAccess.ReadWrite);
            if (str == null) throw new Exception("TLG file must already exist to append this information");
            ai.Save(str);
            str.Flush();
            str.Close();
            return persistence_path;
        }

        /// <summary>
        /// Stores a <see cref="SySal.OperaDb.Scanning.DBMIPMicroTrackIndex"/> to a TLG file.
        /// </summary>
        /// <param name="persistence_path">the path to be used for persistence.</param>
        /// <param name="dbmi">the DBMIPMicroTrackIndex to be persisted.</param>
        /// <returns>the persistence path from where the DBMIPMicroTrackIndex can be rest</returns>
        public static string Persist(string persistence_path, SySal.OperaDb.Scanning.DBMIPMicroTrackIndex dbmi)
        {
            if (!persistence_path.ToLower().EndsWith(".tlg")) throw new Exception("Extension must be .TLG");
            if (persistence_path.ToLower().StartsWith("db:")) throw new Exception("DB serialization for this data type is not supported");
            System.IO.FileStream str = new System.IO.FileStream(persistence_path, System.IO.FileMode.Open, System.IO.FileAccess.ReadWrite);
            if (str == null) throw new Exception("TLG file must already exist to append this information");
            dbmi.Save(str);
            str.Flush();
            str.Close();
            return persistence_path;
        }

		/// <summary>
		/// Stores a LinkedZone to a persistent repository.
		/// </summary>
		/// <param name="persistence_path">the path to be used for persistence.</param>
		/// <param name="obj">the LinkedZone to be persistd.</param>
		/// <returns>the persistence path from where the LinkedZone can be restored.</returns>
		/// <remarks>
		/// <para>Path syntax for <b>LinkedZones</b>
		/// <list type="table">
		/// <item><term>Files</term><description>Standard OS paths. Examples: <example><c>c:\mydata\plate_0023.tlg</c>, <c>\\datasrv.mysite.eu\datashare\plate_0023.tlg</c></example></description></item>
		/// <item><term>DB read path</term><description>The brick id and zone id are required. Example: <example><c>db:\8\277801335.tlg</c></example></description></item>
		/// <item><term>DB write path</term><description>The brick id, plate id, process operation, series, raw data path, start time and end time are required. Example: <example><c>db:\8\139903233\139903188\834\'\\myserver.mysite.eu\datashare\myzone'\'8/11/2008 11:53:08'\'8/11/2008 12:08:24'.tlg</c></example></description></item>
		/// </list>
		/// </para>	
		/// </remarks>
		public static string Persist(string persistence_path, SySal.Scanning.Plate.IO.OPERA.LinkedZone obj)
		{
			if (!persistence_path.ToLower().EndsWith(".tlg")) throw new Exception("Extension must be .TLG");
			System.Text.RegularExpressions.Match m = Persist_LinkedZone_X.Match(persistence_path.ToLower());
			if (m.Success && m.Length == persistence_path.Length)
//			if (persistence_path.ToLower().StartsWith(@"db:\"))
			{
				long idbrick = Convert.ToInt64(m.Groups[1].Value);
				long idplate = Convert.ToInt64(m.Groups[2].Value);
				long idprocop = Convert.ToInt64(m.Groups[3].Value);
				long idseries = Convert.ToInt64(m.Groups[4].Value);
				string rawdatastr = m.Groups[5].Value;
				string startstr = m.Groups[6].Value;
				string endstr = m.Groups[7].Value;
				System.DateTime now = System.DateTime.Now;
				SySal.OperaDb.OperaDbTransaction trans = Conn.BeginTransaction();
				string retstr = "";
#if (!(DEBUG))
				try
				{
#endif
					retstr = @"db:\" + idbrick + @"\" + SySal.OperaDb.Scanning.LinkedZone.Save(obj, idbrick, idplate, idprocop, idseries, 
						rawdatastr, 
						(startstr.Length == 0) ? now : System.DateTime.Parse(startstr), 
						(endstr.Length == 0) ? (now.AddSeconds(1.0)) : System.DateTime.Parse(endstr), Conn, null).ToString() + ".tlg";
					trans.Commit();
#if (!(DEBUG))
				}
				catch (Exception x)
				{
					trans.Rollback();
					throw x;
				}
#endif
				return retstr;
			}
			else
			{
				System.IO.FileStream w = null;
#if (!(DEBUG))
				try
				{
#endif
					w = new System.IO.FileStream(persistence_path, System.IO.FileMode.Create, System.IO.FileAccess.Write);
					obj.Save(w);
					w.Flush();
#if (!(DEBUG))
				}
				catch(Exception x)
				{
					if (w != null) w.Close();
					throw x;
				}
#endif
				w.Close();
				return persistence_path;
			}
		}

		/// <summary>
		/// Stores a Raw Data Catalog to a persistent repository.
		/// </summary>
		/// <param name="persistence_path">the path to be used for persistence.</param>
		/// <param name="obj">the Catalog to be persistd.</param>
		/// <returns>the persistence path from where the Catalog can be restored.</returns>
		/// <remarks>
		/// <para>Path syntax for <b>Raw Data Catalogs</b>
		/// <list type="table">
		/// <item><term>Files</term><description>Standard OS paths. Examples: <example><c>c:\mydata\plate_0023.rwc</c>, <c>\\datasrv.mysite.eu\datashare\plate_0023.rwc</c></example></description></item>
		/// <item><term>DB read path</term><description>N/A</description></item>
		/// <item><term>DB write path</term><description>N/A</description></item>
		/// </list>
		/// </para>
		/// </remarks>
		public static string Persist(string persistence_path, SySal.Scanning.Plate.IO.OPERA.RawData.Catalog obj)
		{
			if (persistence_path.Length >= 4 && string.Compare(persistence_path.Substring(0, 4), @"db:\", true) == 0)
			{
				throw new Exception("persistence to DB is not supported for Raw Data Catalog objects.");
			}
			else
			{
				System.IO.FileStream w = null;
				try
				{
					w = new System.IO.FileStream(persistence_path, System.IO.FileMode.Create, System.IO.FileAccess.Write);
					obj.Save(w);
					w.Flush();
				}
				catch(Exception x)
				{
					if (w != null) w.Close();
					throw x;
				}
				w.Close();
				return persistence_path;
			}
		}

		/// <summary>
		/// Stores a Raw Data Fragment to a persistent repository.
		/// </summary>
		/// <param name="persistence_path">the path to be used for persistence.</param>
		/// <param name="obj">the Fragment to be persistd.</param>
		/// <returns>the persistence path from where the Fragment can be restored.</returns>
		/// <remarks>
		/// <para>Path syntax for <b>Raw Data Fragments</b>
		/// <list type="table">
		/// <item><term>Files</term><description>Standard OS paths. Examples: <example><c>c:\mydata\plate_0023.rwd</c>, <c>c:\mydata\plate_0023.rwd.00000008</c>, <c>\\datasrv.mysite.eu\datashare\plate_0023.rwd</c></example></description></item>
		/// <item><term>DB read path</term><description>N/A</description></item>
		/// <item><term>DB writh path</term><description>N/A</description></item>
		/// </list>
		/// </para>
		/// </remarks>
		public static string Persist(string persistence_path, SySal.Scanning.Plate.IO.OPERA.RawData.Fragment obj)
		{
			if (persistence_path.Length >= 4 && string.Compare(persistence_path.Substring(0, 4), @"db:\", true) == 0)
			{
				throw new Exception("persistence to DB is not supported for Raw Data Fragment objects.");
			}
			else
			{
				System.IO.FileStream w = null;
				try
				{
					w = new System.IO.FileStream(persistence_path, System.IO.FileMode.Create, System.IO.FileAccess.Write);
					obj.Save(w);
					w.Flush();
				}
				catch(Exception x)
				{
					if (w != null) w.Close();
					throw x;
				}
				w.Close();
				return persistence_path;
			}
		}

		static System.Text.RegularExpressions.Regex tsrex = new System.Text.RegularExpressions.Regex(@"db:\\(\d+)\\(\d+)\\(\d+).tsr");

		/// <summary>
		/// Stores a TotalScan Volume to a persistent repository.
		/// </summary>
		/// <param name="persistence_path">the path to be used for persistence.</param>
		/// <param name="obj">the Volume to be persisted.</param>
		/// <returns>the persistence path from where the Volume can be restored.</returns>
		/// <remarks>
		/// <para>Path syntax for <b>TotalScan Reconstructions</b>
		/// <list type="table">
		/// <item><term>Files</term><description>Standard OS paths. Examples: <example><c>c:\mydata\event_512.tsr</c>, <c>\\datasrv.mysite.eu\datashare\event_512.tsr</c></example></description></item>
		/// <item><term>DB read path</term><description>The brick id, reconstruction id and option id are required. Example: <example><c>db:\8\13874388\2.tsr</c></example></description></item>
		/// <item><term>DB write path</term><description>The brick id, process operation id and option id are required. Example: <example><c>db:\8\18004300\5.tsr</c></example></description></item>
		/// </list>
		/// </para>
		/// </remarks>
		public static string Persist(string persistence_path, SySal.TotalScan.Volume obj)
		{
			if (!persistence_path.ToLower().EndsWith(".tsr")) throw new Exception("Extension must be .TSR");
			if (persistence_path.ToLower().StartsWith(@"db:\"))
			{
				System.Text.RegularExpressions.Match m = tsrex.Match(persistence_path);
				if (m.Success == true && m.Length == persistence_path.Length)
				{
					SySal.OperaDb.OperaDbTransaction trans = Conn.BeginTransaction();
					string retstr = "";			
//					try
//					{
						if (m.Groups[3].Value == "0")						
						{
                            retstr = @"db:\" + m.Groups[1].Value + @"\" + SySal.OperaDb.TotalScan.Volume.SaveGeometry(obj, SySal.OperaDb.Convert.ToInt64(m.Groups[1].Value), SySal.OperaDb.Convert.ToInt64(m.Groups[2].Value), Conn, null).ToString() + @"\0.tsr";
						}
						else
						{
                            retstr = @"db:\" + m.Groups[1].Value + @"\" + m.Groups[2].Value + @"\" + SySal.OperaDb.TotalScan.Volume.SaveTopology(obj, SySal.OperaDb.Convert.ToInt64(m.Groups[1].Value), SySal.OperaDb.Convert.ToInt64(m.Groups[2].Value), SySal.OperaDb.Convert.ToInt32(m.Groups[3].Value), Conn, null) + ".tsr";
							
						}
						trans.Commit();
/*					}
					catch (Exception x)
					{
						trans.Rollback();
						throw x;
					}
*/					return retstr;
				}
				else throw new Exception(@"TSR syntax must be db:\brick\id_proc\0.tsr or db:\brick\rec\opt.tsr");
			}
			else
			{
				System.IO.FileStream w = null;
				try
				{
					w = new System.IO.FileStream(persistence_path, System.IO.FileMode.Create, System.IO.FileAccess.Write);
					obj.Save(w);
					w.Flush();
				}
				catch(Exception x)
				{
					if (w != null) w.Close();
					throw x;
				}
				w.Close();
				return persistence_path;
			}
		}

		private static System.Text.RegularExpressions.Regex Persist_XmlDoc_X = new System.Text.RegularExpressions.Regex(@"db:\\'([^']+)'\\'([^']+)'\\(\d+)\\(\d+).xml");

		/// <summary>
		/// Stores Program Settings to a persistent repository.
		/// </summary>
		/// <param name="persistence_path">the path to be used for persistence.</param>
		/// <param name="obj">the Program Settings to be persistd.</param>
		/// <returns>the persistence path from where the Program Settings can be restored.</returns>
		/// <remarks>
		/// <para>Path syntax for <b>ProgramSettings</b>
		/// <list type="table">
		/// <item><term>Files</term><description>Standard OS paths. Examples: <example><c>c:\mydata\predscan01.xml</c>, <c>\\datasrv.mysite.eu\datashare\predscan01.xml</c></example></description></item>
		/// <item><term>DB read path</term><description>The program settings id is required. Example: <example><c>db:\832388.xml</c></example></description></item>
		/// <item><term>DB write path</term><description>The executable, description, driverlevel and template marks usage are required. The driver level must appear as a number (0 - Lowest, 1 - Scanning, 2 - Volume, 3 - Brick, 4 - System); for template mark set usage, 0 means 'uses calibrated marks', nonzero means 'uses nominal marks'. Example: <example><c>db:\'PredictionScan3Driver.exe'\'Prediction scanning for OPERA Scanback'\1\0.xml</c></example></description></item>
		/// </list>
		/// <b>NOTICE: program settings written to the DB in this way will be recorded as being produced by the author specified by the current default access credentials obtained from <see cref="SySal.OperaDb.OperaDbCredentials"/>.</b>
		/// </para>
		/// </remarks>
		public static string Persist(string persistence_path, SySal.OperaDb.ComputingInfrastructure.ProgramSettings prg)
		{
			if (!persistence_path.ToLower().EndsWith(".xml")) throw new Exception("Extension must be .XML");
			if (persistence_path.ToLower().StartsWith(@"db:\"))
			{
				int p = 4, q;
				if (persistence_path[p++] != '\'') throw new Exception("Missing quotes in description specification");
				string description = persistence_path.Substring(p, (q = persistence_path.IndexOf("\'", p)) - p);	
				p = q + 1;
				if (persistence_path[p++] != '\\') throw new Exception("Incorrectly terminated description specification");

				if (persistence_path[p++] != '\'') throw new Exception("Missing quotes in executable specification");
				string executable = persistence_path.Substring(p, (q = persistence_path.IndexOf("\'", p)) - p);	
				p = q + 1;
				if (persistence_path[p++] != '\\') throw new Exception("Incorrectly terminated executable specification");
				
				SySal.OperaDb.OperaDbCredentials cred = SySal.OperaDb.OperaDbCredentials.CreateFromRecord();				
				long id_author = SySal.OperaDb.ComputingInfrastructure.User.CheckLogin(cred.OPERAUserName, cred.OPERAPassword, Conn, null);
				p = q + 1;
				//if (persistence_path[p++] != '\'') throw new Exception("Missing driver level specification");
	
				SySal.DAQSystem.Drivers.DriverType driverlev = (SySal.DAQSystem.Drivers.DriverType)SySal.OperaDb.Convert.ToInt64(persistence_path.Substring(p, (q = persistence_path.IndexOf("\\", p)) - p));
				p = q + 1;
				//if (persistence_path[p++] != '\'') throw new Exception("Missing template marks specification");

				bool templmks = (SySal.OperaDb.Convert.ToInt64(persistence_path.Substring(p, persistence_path.Length - 4 - p)) != 0);	

				SySal.OperaDb.OperaDbTransaction trans = Conn.BeginTransaction();
				string retstr = "";
				try
				{
					retstr = @"db:\" + new ProgramSettings(description, executable, id_author, driverlev, templmks, prg.Settings).Add(Conn, trans).ToString() + ".xml";
					trans.Commit();
				}
				catch (Exception x)
				{
					trans.Rollback();
					throw x;
				}
				return retstr;
			}
			else
			{
				System.IO.StreamWriter w = null;
				try
				{
					w = new System.IO.StreamWriter(persistence_path);
					w.Write(prg.Settings);
					w.Flush();
				}
				catch(Exception x)
				{
					if (w != null) w.Close();
					throw x;
				}
				w.Close();
				return persistence_path;
			}
		}

		/// <summary>
		/// Displays help about the Opera persistence syntax for a specific type.
		/// </summary>
		/// <param name="queriedtype">type for which help is required.</param>
		/// <param name="input">if true, the input syntax is queried, else the output syntax is shown.</param>
		/// <returns>if true, an example is added to the explanation.</returns>
		public static string Help(System.Type queriedtype, bool input, bool example)
		{
			string retstr = "";
			if (queriedtype == typeof(SySal.Scanning.Plate.IO.OPERA.RawData.Catalog))
			{
				if (input)
				{
					retstr = "File system storage syntax: RWC extension preferred.\r\nDB syntax: NOT SUPPORTED.";
					if (example) retstr += "\r\nExample #1: C:\\mydata\\myfile.rwc\r\nExample #2: \\\\mymachine.mydomain.com\\myshare\\myfile.rwc";					
				}
				else
				{
					retstr = "File system storage syntax: RWC extension preferred.\r\nDB syntax: NOT SUPPORTED.";
					if (example) retstr += "\r\nExample #1: C:\\mydata\\myfile.rwc\r\nExample #2: \\\\mymachine.mydomain.com\\myshare\\myfile.rwc";					
				}
			}
			else if (queriedtype == typeof(SySal.Scanning.Plate.IO.OPERA.RawData.Fragment))
			{
				if (input)
				{
					retstr = "File system storage syntax: RWD or RWD.???????? extension preferred.\r\nDB syntax: NOT SUPPORTED.";
					if (example) retstr += "\r\nExample #1: C:\\mydata\\myfile.rwd.00001A84\r\nExample #2: \\\\mymachine.mydomain.com\\myshare\\myfile.rwd";					
				}
				else
				{
					retstr = "File system storage syntax: RWD or RWD.???????? extension preferred.\r\nDB syntax: NOT SUPPORTED.";
					if (example) retstr += "\r\nExample #1: C:\\mydata\\myfile.rwd.00001A84\r\nExample #2: \\\\mymachine.mydomain.com\\myshare\\myfile.rwd";					
				}
			}
			else if (queriedtype == typeof(SySal.Scanning.Plate.IO.OPERA.LinkedZone))
			{
				if (input)
				{
					retstr = "File system storage syntax: TLG extension preferred.\r\nDB syntax: db:\\<batch database id>\\<series id>\\'<raw data path>'\\[<start time>]\\[<end time>].tlg.\r\nNotice that the raw data must be enclosed in SINGLE quotes, and the start and end date are both optional (but the \\ must be present).";
					if (example) retstr += "\r\nExample #1: C:\\mydata\\myfile.tlg\r\nExample #2: db:\\2355\\102\\'c:\\mydata\\myfile'\\\\\\.tlg";
				}
				else
				{
					retstr = "File system storage syntax: TLG extension preferred.\r\nDB syntax: db:\\<database id>.tlg";
					if (example) retstr += "\r\nExample #1: C:\\mydata\\myfile.tlg\r\nExample #2: db:\\15463.tlg";
				}
			}
			else if (queriedtype == typeof(SySal.TotalScan.Volume))
			{
				if (input)
				{
					retstr = "File system storage syntax: TSR extension preferred.\r\nDB syntax: db:\\<process operation database id>\\<reconstructor database id>\\<program settings database id>\\<list of zone database ids>.tsr\r\nNotice that the list of zone database ids must be in the format: number1_number2_number3_number4_... .";
					if (example) retstr += "\r\nExample #1: C:\\mydata\\myfile.tsr\r\nExample #2: db:\\2355\\5\\7\\1204_1224_1253_1289.tsr";
				}
				else
				{
					retstr = "File system storage syntax: TSR extension preferred.\r\nDB syntax: db:\\<database id>.tsr";
					if (example) retstr += "\r\nExample #1: C:\\mydata\\myfile.tsr\r\nExample #2: db:\\8956.tsr";
				}
			}
			else if (queriedtype == typeof(SySal.OperaDb.ComputingInfrastructure.ProgramSettings))
			{
				if (input)
				{
					retstr = "File system storage syntax: XML extension preferred.\r\nDB syntax: db:\\'<description>'\\'<executable>'\\<author database id>\\<driverlevel>\\<usestemplatemarks>.xml\r\nNotice that the description and the executable must be enclosed in SINGLE quotes.";
					if (example) retstr += "\r\nExample #1: C:\\mydata\\myconfig.xml\r\nExample #2: db:\\'Link_configuration_for_CS'\\'BatchLink.exe'\\100009\\0\\0.xml";
				}
				else
				{
					retstr = "File system storage syntax: XML extension preferred.\r\nDB syntax: db:\\<database id>.xml";
					if (example) retstr += "\r\nExample #1: C:\\mydata\\myconfig.xml\r\nExample #2: db:\\34.xml";
				}
			}
			else retstr = "Unknown persistence type.";
			return retstr;
		}
	}
}
