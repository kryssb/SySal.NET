using System;

namespace SySal.Imaging.Fast
{
    /// <summary>
    /// Opaque container for clusters.
    /// </summary>
    public interface IClusterSequenceContainer
    {
        int Images { get; }

        int ClustersInImage(int img);

        Cluster Cluster(int img, int number);

        SySal.BasicTypes.Vector2 PixelToMicron { get; set; }

        int ImageWidth { get; }

        int ImageHeight { get; }

        void SetImagePosition(int img, SySal.BasicTypes.Vector p);

        SySal.BasicTypes.Vector GetImagePosition(int img);

        void WriteToFile(string file);
    }

    /// <summary>
    /// Adds support for fast transfer to IImageProcessor
    /// </summary>
    public interface IImageProcessorFast : IImageProcessor
    {
        IClusterSequenceContainer ClusterSequence { get; }

        void ReleaseClusterSequence(IClusterSequenceContainer seq);

        IClusterSequenceContainer FromFile(string file);

        int Banks { get; }

        int CurrentBank { get; set; }

        bool IsBankFree(int bank);
    }

    /// <summary>
    /// Exceptions for fast imaging.
    /// </summary>
    public class ImageException : Exception
    {
        /// <summary>
        /// Builds an empty image exception.
        /// </summary>
        public ImageException() : base() { }
        /// <summary>
        /// Builds an image exception with a message.
        /// </summary>
        /// <param name="msg">the error message.</param>
        public ImageException(string msg) : base(msg) { }
    }

    /// <summary>
    /// A memory exception that is due to temporary overloading but might not show up again repeating the task later.
    /// </summary>
    public class TemporaryMemoryException : ImageException
    {
        /// <summary>
        /// Builds an empty temporary memory exception.
        /// </summary>
        public TemporaryMemoryException() : base() { }
        /// <summary>
        /// Builds a temporary memory exception with a message.
        /// </summary>
        /// <param name="msg">the error message</param>
        public TemporaryMemoryException(string msg) : base(msg) { }
    }

    /// <summary>
    /// A memory exception that is due to excess allocation and will persist even if repeated with less memory load.
    /// </summary>
    public class PermanentMemoryException : ImageException
    {
        /// <summary>
        /// Builds an empty permanent memory exception.
        /// </summary>
        public PermanentMemoryException() : base() { }
        /// <summary>
        /// Builds a permanent memory exception with a message.
        /// </summary>
        /// <param name="msg">the error message</param>
        public PermanentMemoryException(string msg) : base(msg) { }
    }

    /// <summary>
    /// An exception generated by the algorithm running on a specific dataset.
    /// </summary>
    public class AlgorithmException : ImageException
    {
        /// <summary>
        /// Builds an empty algorithmic exception.
        /// </summary>
        public AlgorithmException() : base() { }
        /// <summary>
        /// Builds an algorithmic exception with a message.
        /// </summary>
        /// <param name="msg">the error message</param>
        public AlgorithmException(string msg) : base(msg) { }
    }

    /// <summary>
    /// One or more parameters are invalid.
    /// </summary>
    public class ParameterException : ImageException
    {
        /// <summary>
        /// Builds an empty parameter exception.
        /// </summary>
        public ParameterException() : base() { }
        /// <summary>
        /// Builds a parameter exception with a message.
        /// </summary>
        /// <param name="msg">the error message.</param>
        public ParameterException(string msg) : base(msg) { }
    }
}
